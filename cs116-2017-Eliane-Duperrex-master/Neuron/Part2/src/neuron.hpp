/*!A neuron class */
#ifndef NEURON_HPP
#define NEURON_HPP
#include <fstream>
#include <cmath>
#include <vector>
#include <array>
#include "constant.hpp"

class Neuron {
	private :
		static constexpr Index BufferSize = ((D/H)+1); ///size buffer
		static constexpr double TAU = 20.0; //!<time constant
		static constexpr step TAU_REFRACTORY = 2.0/H; //!<time constant in which the neuron is refractory		
		static constexpr double C = 1.0; //!<capacity of the membrane		
		static constexpr double R = (TAU/C); //!<membrane resistance		
		static constexpr double V_THRESHOLD = 20.0; //!<potential threshold		
		static constexpr double V_RESET = 0.0; //!<resset potential
		static constexpr double C1 = exp(-H/TAU); //!< for ODE equation
		static constexpr double C2 = R*(1-exp(-H/TAU)); //!< for ODE equation
		
		double membrane_potential_; //!<membrane potential of the neuron
		
		std::vector<step> spikes_time_; //!<times when spikes occure
		
		step clock_; //!<specific clock for the neuron
		
		bool isRefract_; //!<tell if the neuron is refractory
	
		double input_current_; //!< input current 
		
		bool isExcitatory_; //!<tells if a neuron is excitatory or inibitory
		/**
		 * to store the time when the neuron will receive 
		 * the spike from another one with each J
		 * */
		std::array<double, BufferSize> timeDelayBuffer_; //!<store the amplitude received from a spike of another neuron
		/**
		 * determine if the neuron is in refractory period at a step t
		 * test if the neuron is refractory at time t, if so isRefract_ = true
		 * @param step 
		 * */
		void isRefractory(const step& t); //!<test if neuron is refractory and set isRefract
		/**
		 * add a time of a spike in vector spikes_time
		 * @param time of spike
		 * */
		void addSpikeTime(const step& time);
	public:	
		/**
		 * initialise the different attributes with some constants provided in constant.hpp '\n'
		 * clock -> 0 '\n'
		 * membrane potential -> 0 '\n'
		 * input current -> 0 '\n'
		 * isExcitatory -> true '\n'
		 * isRefractory -> false '\n'
		 * timeDelayBuffer -> all 0 in the array '\n'
		 * when there hasn't been any spike, the neuron cannot be refractory
		 * */	
		Neuron(); //!<Contructor by default
		/**
		 * Constructor which differences if it an excitatory or inhibitory neuron
		 * @param isExcitatory
		 * */
		Neuron(const bool& isExcitatory); //!<constructor which precise type of neuron
		/**
		 * Destructor by default
		 * */
		~Neuron();
		/**
		 * Getter
		 * @return membrane potential
		 * */
		double getMembranePotential() const; 
		/**
		 * Getter
		 * @return total number of spikes in the simulation
		 *  */
		Index getSpikeTimeSize() const; 
		/**
		 * Getter
		 * @param number of spike
		 * @return a specific spike time
		 * */
		step getTimeSpike(const int& i) const;
		/**
		 * Getter
		 * @return vector of the different times of the spike
		 * */
		std::vector<step> getTimeSpikeTab() const;
		/**
		 * Getter of the neuron state (excitatory or inhibitory)
		 * @return state of neuron 
		 * */
		bool isExcitatory() const;
		/**
		 * Setter of input current
		 * @param input current
		 * */
		void setInputCurrent(const double& input);
		/**
		 * test if neuron spike (if membrane potential > a threshold) \n
		 * if spike -> addSpikeTime of t, return true \n
		 * use of isRefractory \n
		 * if neuron in refractory time -> potential set to 0 and return false \n
		 * else	-> potential updated	-> with the differential equation \n
		 * 			\t -> with the spike received from connexion (buffer) \n
		 * 							\t	-> with background noise (spike with poisson) \n
		 * 			-> reset buffer to 0 \n
		 * 			-> return false \n
		 * @param step
		 * @param integer generated by poisson generator in network
		 * @see isRefractory
		 * @see addSpikeTime
		 * @return if spike or not
		 * */
		bool update(const step& t, const int& poisson); //!<Update of the neuron for a step t
		/**
		 * used in network to store the delay with the delay and the particular J
		 * @param amplitude
		 * @param delay
		 * */
		void receive(const double& amplitude, const step& delay); //!<neuron receive a spike with a delay	 
		/**
		 * store the vector spikes_time in a file
		 * @param file where we store the data
		 * @param index of the neuron in the network
		 * */
		void storeSpikeTime(std::ofstream& file, Index ind) const;
		/**
		 * store the membrane potential in a file
		 * @param file where we store the data
		 * */	
		void storePotentialMembrane(std::ofstream& file) const;				
};
#endif


